<?php
//加密方式：php源码混淆类加密。免费版地址:https://www.zhaoyuanma.com/phpjm.html 免费版不能解密,可以使用VIP版本。

//发现了time,请自行验证这套程序是否有时间限制.
//此程序由【找源码】http://Www.ZhaoYuanMa.Com (免费版）在线逆向还原，QQ：7530782 
?>
<?php
 namespace app\common\controller; use app\common\library\Auth; use think\Config; use think\exception\HttpResponseException; use think\exception\ValidateException; use think\Hook; use think\Lang; use think\Loader; use think\Request; use think\Response; use think\Route; use think\Db; use think\Log; use AlibabaCloud\Client\AlibabaCloud; use AlibabaCloud\Client\Exception\ClientException; use AlibabaCloud\Client\Exception\ServerException; class Api { protected $request; protected $failException = false; protected $batchValidate = false; protected $beforeActionList = []; protected $noNeedLogin = []; protected $noNeedRight = []; protected $auth = null; protected $responseType = 'json'; public function __construct(Request $request = null) { Log::record('[ 接收参数 ] INIT ' . var_export($_REQUEST, true), 'applog'); $this->request = is_null($request) ? Request::instance() : $request; $this->_initialize(); $this->user_id = $this->auth->id; if ($this->beforeActionList) { foreach ($this->beforeActionList as $method => $options) { is_numeric($method) ? $this->beforeAction($options) : $this->beforeAction($method, $options); } } } protected function _initialize() { if (Config::get('url_domain_deploy')) { $domain = Route::rules('domain'); if (isset($domain['api'])) { if (isset($_SERVER['HTTP_ORIGIN'])) { header("Access-Control-Allow-Origin: " . $this->request->server('HTTP_ORIGIN')); header('Access-Control-Allow-Credentials: true'); header('Access-Control-Max-Age: 86400'); } if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') { if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'])) { header("Access-Control-Allow-Methods: GET, POST, OPTIONS"); } if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS'])) { header("Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}"); } } } } $this->request->filter('trim,strip_tags,htmlspecialchars'); $this->auth = Auth::instance(); $modulename = $this->request->module(); $controllername = strtolower($this->request->controller()); $actionname = strtolower($this->request->action()); $token = $this->request->server('HTTP_TOKEN', $this->request->request('token', \think\Cookie::get('token'))); $path = str_replace('.', '/', $controllername) . '/' . $actionname; $this->auth->setRequestUri($path); if (!$this->auth->match($this->noNeedLogin)) { $this->auth->init($token); if (!$this->auth->isLogin()) { $this->error(__('Please login first'), null, 2); } if (!$this->auth->match($this->noNeedRight)) { if (!$this->auth->check($path)) { $this->error(__('You have no permission'), null, 403); } } } else { if ($token) { $this->auth->init($token); } } $upload = \app\common\model\Config::upload(); Hook::listen("upload_config_init", $upload); Config::set('upload', array_merge(Config::get('upload'), $upload)); $this->loadlang($controllername); } protected function loadlang($name) { Lang::load(APP_PATH . $this->request->module() . '/lang/' . $this->request->langset() . '/' . str_replace('.', '/', $name) . '.php'); } protected function success($msg = '', $data = null, $code = 1, $type = null, array $header = []) { $this->result($msg, $data, $code, $type, $header); } protected function error($msg = '', $data = null, $code = 0, $type = null, array $header = []) { $this->result($msg, $data, $code, $type, $header); } protected function ApiReturn($code = 0,$msg = '', $data = array(), $type = null, array $header = []) { $this->results($msg, $data, $code, $type, $header); } protected function results($msg = '', $data = array(), $code = 0, $type = null, array $header = []) { $msg = $msg ? : '请求成功'; $result = [ 'code' => $code, 'message' => $msg, 'data' => $data, ]; Log::record('[ 返回参数 ] INIT ' . var_export($result, true), 'applog'); $type = $type ? $type : ($this->request->param(config('var_jsonp_handler')) ? 'jsonp' : $this->responseType); if (isset($header['statuscode'])) { $code = $header['statuscode']; unset($header['statuscode']); } else { $code = $code >= 1000 || $code < 200 ? 200 : $code; } $response = Response::create($result, $type, $code)->header($header); throw new HttpResponseException($response); } protected function result($msg = '', $data = null, $code = 0, $type = null, array $header = []) { $msg = $msg ? : '请求成功'; $result = [ 'code' => $code, 'message' => $msg, 'data' => $data, ]; Log::record('[ 返回参数 ] INIT ' . var_export($result, true), 'applog'); $type = $type ? $type : ($this->request->param(config('var_jsonp_handler')) ? 'jsonp' : $this->responseType); if (isset($header['statuscode'])) { $code = $header['statuscode']; unset($header['statuscode']); } else { $code = $code >= 1000 || $code < 200 ? 200 : $code; } $response = Response::create($result, $type, $code)->header($header); throw new HttpResponseException($response); } protected function beforeAction($method, $options = []) { if (isset($options['only'])) { if (is_string($options['only'])) { $options['only'] = explode(',', $options['only']); } if (!in_array($this->request->action(), $options['only'])) { return; } } elseif (isset($options['except'])) { if (is_string($options['except'])) { $options['except'] = explode(',', $options['except']); } if (in_array($this->request->action(), $options['except'])) { return; } } call_user_func([$this, $method]); } protected function validateFailException($fail = true) { $this->failException = $fail; return $this; } protected function validate($data, $validate, $message = [], $batch = false, $callback = null) { if (is_array($validate)) { $v = Loader::validate(); $v->rule($validate); } else { if (strpos($validate, '.')) { list($validate, $scene) = explode('.', $validate); } $v = Loader::validate($validate); !empty($scene) && $v->scene($scene); } if ($batch || $this->batchValidate) { $v->batch(true); } if (is_array($message)) { $v->message($message); } if ($callback && is_callable($callback)) { call_user_func_array($callback, [$v, &$data]); } if (!$v->check($data)) { if ($this->failException) { throw new ValidateException($v->getError()); } return $v->getError(); } return true; } protected function addOfficialMessage($title=null,$user_id,$content){ $title = $title ? : '系统通知'; $info['title']=$title; $info['user_id']=$user_id; $info['content']=$content; $info['created_at']=date('Y-m-d H:i:s',time()); $res=DB::name('official_messages')->insertGetId($info); return $res; } protected function roomDataFormat($data = array()){ if(!$data) return[]; foreach ($data as $k => &$v) { $v['openid'] = !empty($v['openid']) ? : ''; $v['room_name'] = urldecode($v['room_name']); } return $data; } protected function unlock_wares($user_id,$cp_id = null){ if($cp_id){ $level=$this->getCpLevel($cp_id); $get_type = 8; }else{ $get_type = 1; $level=$this->getVipLevel($user_id,3); } $type=[4,5,6,7,8]; foreach ($type as $k => &$v) { $where['get_type']=$get_type; $where['enable']=1; $where['level']=['elt',$level]; $where['type']=$v; $wares=DB::name('wares')->where($where)->field('id,type,expire')->order("id desc")->limit(1)->find(); if(!$wares) continue; $where_pack['user_id'] =$user_id; $where_pack['get_type'] =$get_type; $where_pack['type'] =$v; $target_id=DB::name('pack')->where($where_pack)->value('target_id'); if($wares['id'] == $target_id) continue; if(!$target_id){ $arr['user_id']=$user_id; $arr['get_type']=$get_type; $arr['type']=$v; $arr['target_id']=$wares['id']; $arr['addtime']=time(); $arr['expire']= $wares['expire'] ? time()+($wares['expire']*86400) : 0; $res=Db::name('pack')->insert($arr); }else{ $res=DB::name('pack')->where($where_pack)->update(['target_id'=>$wares['id']]); } if($res && in_array($v,[4,5,6,7]) && $get_type == 1){ $dress='dress_'.$v; DB::name('users')->where(['id'=>$user_id])->update([$dress=>$wares['id']]); } } } protected function add_user_official($user_id,$get_type,$level){ if($get_type == 1){ $where['type'] = 3; $class="VIP"; }elseif($get_type == 8){ $where['type'] = 5; $class="守护CP"; }else{ return false; } $where['level']=$level; $auth=DB::name('vip_auth')->where($where)->value('name'); if(!$auth) return false; $content="恭喜,".$class.'等级达到'.$level.'级啦,成功解锁'.$auth.'特权哦~'; $this->addOfficialMessage('',$user_id,$content); } protected function update_user_total($user_id = null,$type =null , $mizuan = null){ if(!$user_id || !$type || !$mizuan) return false; $data=DB::name('user_total')->where(['user_id'=>$user_id])->find(); if($type == 1){ DB::name('user_total')->where(['user_id'=>$user_id])->setInc('room',$mizuan); }elseif($type == 2){ DB::name('user_total')->where(['user_id'=>$user_id])->setInc('send',$mizuan); $vip_level = $this->getVipLevel_two($user_id,3); $res=DB::name('user_total')->where(['user_id'=>$user_id])->update(['vip_level'=>$vip_level]); if($res){ $this->add_user_official($user_id,1,$vip_level); } }elseif($type == 3){ DB::name('user_total')->where(['user_id'=>$user_id])->setInc('gain',$mizuan); }elseif($type == 4){ $cp_level=$this->getUserMaxCpLevel($user_id,'level'); $res=DB::name('user_total')->where(['user_id'=>$user_id])->update(['cp_level'=>$cp_level]); if($res){ $this->add_user_official($user_id,8,$cp_level); } }else{ return false; } } public function getVipLevel_two($user_id=null,$type = null,$is_img = null){ if(!$user_id || !$type) return 0; $gold_num = DB::name('user_total')->where('user_id',$user_id)->value('send'); $star_num = DB::name('user_total')->where('user_id',$user_id)->value('gain'); if($type == 1){ $mizuan = $star_num; }elseif($type == 2 || $type == 3){ $mizuan = $gold_num; }else{ return 0; } if(!$mizuan && $is_img == 'img'){ return ''; } if(!$mizuan) return 0; $level = DB::name('vip')->where(['type'=>$type]) ->where('mizuan','<=',$mizuan) ->order('id','desc') ->limit(1) ->value('level'); if($is_img == 'img'){ if($level){ $img=DB::name('vip')->where(['level'=>$level,'type'=>$type])->value('img'); return $this->auth->setFilePath($img); }else{ return ''; } }else{ return $level; } } protected function getUserMaxCpLevel($user_id = null,$field = null){ if(!$user_id || !$field) return 0; $where['user_id|fromUid']=$user_id; $where['status']=1; $cp=DB::name('cp')->where($where)->order('exp desc')->limit(1)->find(); if(!$cp) return 0; $exp=$cp['exp']; $where_vip['type']=5; $where_vip['exp']=['elt',$exp]; $level=DB::name('vip')->where($where_vip)->order('id desc')->limit(1)->value('level'); if($field == 'level'){ return $level; }else{ return $cp[$field] ? : 0; } } protected function cpDataFormat($data = array()){ if(!$data) return[]; foreach ($data as $k => &$v) { $v['cp_level']=$this->getCpLevel($v['id']); $v['user_nick']=getUserField($v['user_id'],'nickname'); $v['user_head']=$this->auth->setFilePath(getUserField($v['user_id'],'headimgurl')); $v['from_nick']=getUserField($v['fromUid'],'nickname'); $v['from_head']=$this->auth->setFilePath(getUserField($v['fromUid'],'headimgurl')); $bs_img=DB::name('vip')->where(['type'=>5,'level'=>$v['cp_level']])->value('img'); $v['bs_img']=$this->auth->setFilePath($bs_img); $days=(time() - $v['agreetime']) / 86400; $v['days']=(string)floor($days); $v['cp_type']=1; } return $data; } protected function getCpLevel($cp_id){ $exp=DB::name('cp')->where(['id'=>$cp_id])->value('exp'); $where['type']=5; $where['exp']=['elt',$exp]; $level=DB::name('vip')->where($where)->order('id desc')->limit(1)->value('level'); return $level; } protected function check_cpcard_num($user_id){ $sum=DB::name('users')->where(['id'=>$user_id])->value('cp_card'); $where['user_id|fromUid']=$user_id; $where['status']=1; $have_num=DB::name('cp')->where($where)->count(); return ($sum > $have_num) ? 1 : 0; } protected function check_first_cp($user_id,$fromUid,$status){ $where['user_id|fromUid']=$user_id; $where['status']=$status; $id=DB::name('cp')->where($where)->where("`user_id` = {$fromUid} OR `fromUid` = {$fromUid}")->value('id'); return $id; } protected function check_shenqing_cp($user_id){ $where['user_id|fromUid']=$user_id; $where['status']=3; $id=DB::name('cp')->where($where)->value('id'); return $id; } protected function SensitiveWords($content = null){ return true; if(!$content) return false; $key_id=$this->getConfig('ali_sms_key_id'); $key_secret=$this->getConfig('ali_sms_key_secret'); AlibabaCloud::accessKeyClient($key_id, $key_secret) ->regionId('cn-beijing') ->asDefaultClient(); $body=array( 'scenes'=>['antispam'], 'tasks'=>array(['content'=>$content]), ); $data=json_encode($body,JSON_UNESCAPED_UNICODE); $result = AlibabaCloud::roa() ->product('Green') ->version('2018-05-09') ->pathPattern('/green/text/scan') ->method('POST') ->options([ 'query' => [ 'ClientInfo' => '{}', ], ]) ->body($data) ->request(); $res=$result->toArray(); if($res['code'] == 200 && $res['msg'] =='OK'){ $results=$res['data'][0]['results'][0]; if($results['suggestion'] == 'pass'){ return true; }elseif($results['suggestion'] == 'block'){ $str=getYunDunGreen($results['label']); $this->ApiReturn(0,'内容含有'.$str.'信息,请重新发布'); } }else{ return false; $this->ApiReturn(0,'内容安全检测错误'); } } protected function SensitiveImage($file = null){ return true; $file=$this->auth->setFilePath($file); if(!$file) return false; $key_id=$this->getConfig('ali_sms_key_id'); $key_secret=$this->getConfig('ali_sms_key_secret'); AlibabaCloud::accessKeyClient($key_id, $key_secret) ->regionId('cn-beijing') ->asDefaultClient(); $body=array( 'scenes'=>['porn','terrorism'], 'tasks'=>array(['url'=>$file]), ); $data=json_encode($body,JSON_UNESCAPED_UNICODE); $result = AlibabaCloud::roa() ->product('Green') ->version('2018-05-09') ->pathPattern('/green/image/scan') ->method('POST') ->options([ 'query' => [ 'ClientInfo' => '{}', ], ]) ->body($data) ->request(); $res=$result->toArray(); if($res['code'] == 200 && $res['msg'] =='OK'){ $results=$res['data'][0]['results']; foreach ($results as $k => &$v) { $str=getYunDunImgGreen($v['label']); if($str){ $file_path=".".strstr($file, "/upload"); unlink($file_path); $this->ApiReturn(0,'图片中含有'.$str.'信息,请重新上传'); } } return true; }else{ return false; $this->ApiReturn(0,'内容安全检测错误'); } } public function base64_image_content($base64_image_content = null, $file = null) { if (empty($base64_image_content) || empty($file)) return false; if ($file == 1) { $path = '/avatar/'; $math="/^(data:\s*image\/(\w+);base64,)/"; } elseif ($file == 2) { $path = '/cover/'; $math="/^(data:\s*image\/(\w+);base64,)/"; } elseif ($file == 3) { $path = '/music/'; $math="/^(data:\s*audio\/(\w+);base64,)/"; } elseif ($file == 4) { $path = '/video/'; $math="/^(data:\s*video\/(\w+);base64,)/"; } elseif ($file == 5) { $path = '/images/'; $math="/^(data:\s*image\/(\w+);base64,)/"; } elseif ($file == 6) { $path = '/dynamic_image/'; $math="/^(data:\s*image\/(\w+);base64,)/"; }elseif ($file == 7){ $path = '/audio/'; $math="/^(data:\s*audio\/(\w+);base64,)/"; }elseif ($file == 8){ $path = '/avatar/'; $math="/^(data:\s*image\/(\w+);base64,)/"; } else { return false; } if (preg_match($math, $base64_image_content, $result)) { $type = $result[2]; $new_file = ROOT_PATH . 'public' . '/upload' . $path . date('Ymd', time()); if (!is_dir($new_file)) { mkdir($new_file, 0777, true); } $new_file = $new_file . "/" . time() . mt_rand(1000, 9999) . ".{$type}"; if (file_put_contents($new_file, base64_decode(str_replace($result[1], '', $base64_image_content)))) { return strstr($new_file, "/upload"); } else { return false; } } else { return false; } } function pwdMd5($value, $salt) { $user_pwd = md5(md5($value) . $salt); return $user_pwd; } public function getVipLevel($user_id=null,$type = null,$is_img = null){ if(!$user_id || !$type) return 0; $star_num = DB::name('gift_logs')->where('fromUid',$user_id)->sum('giftPrice'); $gold_num = DB::name('gift_logs')->where('user_id',$user_id)->sum('giftPrice'); if($type == 1){ $mizuan = $star_num; }elseif($type == 2 || $type == 3){ $mizuan = $gold_num; }else{ return 0; } if(!$mizuan && $is_img == 'img'){ return ''; } if(!$mizuan) return 0; $level = DB::name('vip')->where(['type'=>$type]) ->where('mizuan','<=',$mizuan) ->order('id','desc') ->limit(1) ->value('level'); if($is_img == 'img'){ if($level){ $img=DB::name('vip')->where(['level'=>$level,'type'=>$type])->value('img'); return $this->auth->setFilePath($img); }else{ return ''; } }else{ return $level; } } public function getHzLevel($user_id){ $vip_level = $this->getVipLevel($user_id,3); $level=ceil($vip_level/2); return $level; } protected function userNowRoom($user_id = null){ if(!$user_id) return false; $is_afk = DB::name('rooms')->where('uid',$user_id)->value('is_afk'); if($is_afk) return $user_id; $uid = DB::name('rooms')->where('roomVisitor','like','%'.$user_id.'%')->value('uid'); return $uid ? : 0; } protected function getConfig($name=null){ if(!$name) return ''; $val=DB::name('config')->where('name',$name)->where('status',1)->value('value'); return $val; } protected function getFileSize($file = null){ if(file_exists("./upload/".$file)){ $byte=filesize("upload/".$file); }else{ $byte = 0; } $KB = 1024; $MB = 1024 * $KB; $GB = 1024 * $MB; $TB = 1024 * $GB; if ($byte < $KB) { return $byte . "B"; } elseif ($byte < $MB) { return round($byte / $KB, 2) . "KB"; } elseif ($byte < $GB) { return round($byte / $MB, 2) . "MB"; } elseif ($byte < $TB) { return round($byte / $GB, 2) . "GB"; } else { return round($byte / $TB, 2) . "TB"; } } protected function deleteFile($file = null) { if(!$file) return false; $file_path="./upload/".$file; if(is_file($file_path)){ if(unlink($file_path)){ return true; }else{ return false; } }else{ return false; } } protected function dataFormat($data = null,$user_id = null){ if(!$data || !$data || !$user_id) return []; foreach ($data as $k => &$v) { $v['audio_time']=$v['audio_time'] ? : ''; $v['headimgurl']=$this->auth->setFilePath($v['headimgurl']); $img_arr=json_decode($v['image'],true); $img_arr=array_map(function($val){ return $this->auth->setFilePath($val); }, $img_arr); $v['image']=implode(',', $img_arr); $v['content']=urldecode($v['content']) ? : ''; if($v['tags']){ $tags_arr=explode(',', $v['tags']); $tags_arr=array_map(function($val){ return '#'.DB::name('labels')->where('id',$val)->value('name'); }, $tags_arr); $v['tags_str']=implode(',', $tags_arr); }else{ $v['tags_str']=''; $v['tags']=''; } $v['audio'] = $this->auth->setFilePath($v['audio']); $v['video'] = $this->auth->setFilePath($v['video']); $v['addtime'] = date('Y-m-d H:i:s',$v['addtime']); if(!empty($v['like_time'])){ $v['like_time'] = is_numeric($v['like_time']) ? date('Y-m-d H:i:s',$v['like_time']) : $v['like_time']; } $v['talk_num']=DB::name('dynamic_comments')->where('b_dynamic_id',$v['id'])->count(); $v['praise_num']=$v['praise']; $v['forward_num']=DB::name('likes')->where('type',3)->where('target_id',$v['id'])->count(); $v['is_praise'] = DB::name('likes')->where('type',1)->where('target_id',$v['id'])->where('user_id',$user_id)->value('id') ? 1 : 0; $v['is_collect'] = DB::name('likes')->where('type',2)->where('target_id',$v['id'])->where('user_id',$user_id)->value('id') ? 1 : 0; $v['vip_level']=$this->getVipLevel($v['user_id'],3); $v['is_follow']=DB::name('follows')->where('user_id',$user_id)->where('followed_user_id',$v['user_id'])->where('status',1)->value('id') ? 1 :0; } unset($v); return $data; } public function uploadOnes($file,$file_type = 5,$class='image'){ if($file_type == 1){ $path = 'avatar'; }elseif($file_type == 2){ $path = 'cover'; }elseif($file_type == 3){ $path = 'music'; }elseif($file_type == 4){ $path = 'video'; }elseif($file_type == 5){ $path = 'images'; }elseif($file_type == 6){ $path = 'dynamic_image'; }elseif ($file_type == 7){ $path = 'audio'; }else{ return false; } if($class=='image'){ $file_class="jpg,gif,png,jpeg,bmp"; }elseif($class=='audio'){ $file_class="mp3,wav,ogg,m4a"; }elseif($class=='video'){ $file_class="vob,mpg,avi,mp4,mkv,mov"; }elseif($class=='file'){ $file_class="zip,rar,exe,apk,pdf,doc,xls,ppt,docx,xlsx,pptx,txt"; }elseif($class=='all'){ $file_class="jpg,gif,png,jpeg,bmp,mp3,wav,ogg,vob,mpg,avi,mp4,mkv,mov,zip,rar,pdf,doc,xls,ppt,docx,xlsx,pptx,txt"; }else{ $this->ApiReturn(0,'文件格式错误'); } $move = ROOT_PATH . 'public' . DS . 'upload'; if ($path){ $move = $move.'/'.$path; } $check['size'] = 5*pow(2,20); $check['ext'] = $file_class; $info = $file->validate($check)->move($move); if($info){ $getSaveName = $info->getSaveName(); $getSaveName = '/'.$path.'/'.str_replace("\\","/",$getSaveName); $getSaveName = '/upload'.$getSaveName; return $getSaveName; }else{ $this->ApiReturn(0,$file->getError()); } } public function uploadOne($file,$file_type = 5,$class='image'){ if(!$file) return false; if($file_type == 1){ $path = 'avatar'; }elseif($file_type == 2){ $path = 'cover'; }elseif($file_type == 3){ $path = 'music'; }elseif($file_type == 4){ $path = 'video'; }elseif($file_type == 5){ $path = 'images'; }elseif($file_type == 6){ $path = 'dynamic_image'; }else{ return false; } if($class=='image'){ $file_class="jpg,gif,png,jpeg,bmp"; }elseif($class=='audio'){ $file_class="mp3,wav,ogg"; }elseif($class=='video'){ $file_class="vob,mpg,avi,mp4,mkv,mov"; }elseif($class=='file'){ $file_class="zip,rar,exe,apk,pdf,doc,xls,ppt,docx,xlsx,pptx,txt"; }elseif($class=='all'){ $file_class="jpg,gif,png,jpeg,bmp,mp3,wav,ogg,vob,mpg,avi,mp4,mkv,mov,zip,rar,pdf,doc,xls,ppt,docx,xlsx,pptx,txt"; }else{ return false; } $originalName = $file->getClientOriginalName(); $ext = strtolower($file->getClientOriginalExtension()); $realPath = $file->getRealPath(); $type = $file->getClientMimeType(); $arr=explode(",",$file_class); if(!in_array($ext,$arr)) return false; $date=date('Ymd',time()); $new_file = public_path().'/upload/'.$path.'/'.$date; if(!is_dir($new_file)){ mkdir($new_file,0777,true); } $name=time().mt_rand(1000,9999). '.' . $ext; $filename = $path.'/'.$date."/".$name; $bool = Storage::disk('http')->put($filename, file_get_contents($realPath)); if($bool){ return "/".$filename; }else{ return false; } } function lhlog($arg, $file = '', $line = ''){ $str = "\r\n-- ". date('Y-m-d H:i:s'). " --------------------\r\n"; $str .= "FILE: $file\r\nLINE: $line\r\n"; $str .= "_URL: ".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']."\r\n"; if (is_array($arg)){ $str .= '$arg = array('; foreach ($arg AS $key => $list) { $str .= "'$key' => '$list'\r\n"; } $str .= ")\r\n"; }else{ $str .= $arg; } file_put_contents(ROOT_PATH.'runtime/log/applog_'.date('Y-m-d').'_log.txt', $str,FILE_APPEND); } } ?>